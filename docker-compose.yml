version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: outage_forecast_db
    environment:
      POSTGRES_DB: outage_forecast
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      TIMESCALEDB_TELEMETRY: off
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - outage_network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: outage_forecast_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - outage_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: outage_forecast_api
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/outage_forecast
      REDIS_URL: redis://redis:6379/0
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "false"
    ports:
      - "8000:8000"
    depends_on:
      - timescaledb
      - redis
    networks:
      - outage_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: outage_forecast_frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
    depends_on:
      - api
    networks:
      - outage_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: outage_forecast_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - outage_network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: outage_forecast_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - outage_network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: outage_forecast_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    networks:
      - outage_network
    restart: unless-stopped

volumes:
  timescale_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  outage_network:
    driver: bridge
